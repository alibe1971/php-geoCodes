<?php

namespace Alibe\GeoCodes\Dev\BuildTools;

use Exception;
use Symfony\Component\String\Slugger\AsciiSlugger;
use Symfony\Component\Finder\Finder;

class Functions
{
    /**
     * @var string
     */
    public string $devDirectory;

    /**
     * @var string
     */
    private string $baseDirectory;

    /**
     * @var array<int|string, mixed>
     */
    private array $dataStructure = [];

    public function __construct()
    {
        $this->devDirectory = dirname(dirname(__FILE__));
        $this->baseDirectory = dirname($this->devDirectory);
    }

    /**
     * @param string $filename
     * @param array<string|int, mixed> $data
     * @return void
     */
    public function build(string $filename, array $data): void
    {
        print('  => building `' . $filename . "` data ...\n");
        $this->buildJson($filename, $data);
        $this->buildArray($filename, $data);
    }

    /**
     * @param string $filename
     * @param array<int|string, mixed> $data
     * @return void
     */
    private function buildJson(string $filename, array $data): void
    {
        $prettyJson = json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);
        $minified   = json_encode($data, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);
        $file = $this->devDirectory . '/derivativeJson/' . $filename;
        $dir = dirname($file);
        if (!is_dir($dir)) {
            mkdir($dir, 0755, true);
        }
        file_put_contents($file . '.json', $prettyJson);
        file_put_contents($file . '.min.json', $minified);

        $this->dataStructure[] = $file . '.json';
        $this->dataStructure[] = $file . '.min.json';
    }

    /**
     * @param string $filename
     * @param array<string|int, mixed> $data
     * @return void
     */
    private function buildArray(string $filename, array $data): void
    {
        $jsonString = json_encode($data);

        if ($jsonString === false) {
            throw new \RuntimeException('Failed to encode data to JSON.');
        }

        $data = json_decode(
            $jsonString,
            true,
            512,
            JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES | JSON_HEX_QUOT
        );

        $exportedData = var_export($data, true) . ";\n";
        $exportedData = preg_replace("/\d+ =>/", "", $exportedData);
        $exportedData = str_replace("array (\n", "[\n", $exportedData);
        $exportedData = preg_replace("/=>\s+/", '=> ', $exportedData);
        $exportedData = str_replace("),\n", "],\n", $exportedData);
        $exportedData = str_replace(");", "];\n", $exportedData);
        $exportedData = str_replace('NULL,', 'null,', $exportedData);
        $exportedData = str_replace('TRUE,', 'true,', $exportedData);
        $exportedData = str_replace('FALSE,', 'false,', $exportedData);
        $exportedData = preg_replace('/^\h*\v+/m', '', $exportedData);

        $fileCt = "<?php\n\n";
        $fileCt .= "/**\n";
        $fileCt .= " * This file has been automatically generated by the `build` script in the `dev` section.\n";
        $fileCt .= " * Any modifications you make will be overwritten.\n";
        $fileCt .= " * To modify the parameters in this file, please follow these steps:\n";
        $fileCt .= " * - Go to the `dev/origin` section.\n";
        $fileCt .= " * - Modify the corresponding JSON file.\n";
        $fileCt .= " * - Run the `build` script again from the root of this project using one of these commands:\n";
        $fileCt .= " *   - `dev/build`\n";
        $fileCt .= " *   - `sh dev/build`\n";
        $fileCt .= " * For further and more detailed information, please read the README.md file in the dev section.\n";
        $fileCt .= "*/\n\n";

        $fileCt .= "return " . $exportedData;
        $file = $this->baseDirectory . '/src/Data/' . $filename . '.php';
        $dir = dirname($file);
        if (!is_dir($dir)) {
            mkdir($dir, 0755, true);
        }
        file_put_contents($file, $fileCt);

        $this->dataStructure[] = $file;
    }

    /**
     * @param string|null $input
     * @return false|string
     */
    public function slug(?string $input)
    {
        $input = preg_replace("/\./", "", $input);
        $slugger = new AsciiSlugger();
        $input = $slugger->slug($input, ' ');
        $input = preg_replace('/\s+/', ' ', $input);
        return iconv("UTF-8", "ASCII//TRANSLIT", strtolower($input));
    }

    /**
     * @param string $file
     * @return array<string, mixed>
     */
    public function getData(string $file): array
    {
        try {
            $fileContents = file_get_contents($file);
            if ($fileContents === false) {
                throw new Exception("Impossible to read the file " . $file);
            }
            $data = json_decode($fileContents, true);
            if (json_last_error() !== JSON_ERROR_NONE) {
                throw new Exception("Wrong JSON structure in `" . $file . "`. " . json_last_error_msg());
            }
        } catch (Exception $e) {
            echo "Throw: " . $e->getMessage();
            exit(1);
        }

        return $data;
    }

    /**
     * @return void
     */
    public function cleanStructure(): void
    {
        $finder = new Finder();
        $finder->files()->in([
               $this->devDirectory . '/derivativeJson',
               $this->baseDirectory . '/src/Data'
            ])
            ->ignoreDotFiles(true)
            ->ignoreVCSIgnored(true);
        foreach ($finder as $file) {
            $item = $file->getRealPath();
            if (!in_array($item, $this->dataStructure)) {
                unlink($item);
            }
        }
    }
}
